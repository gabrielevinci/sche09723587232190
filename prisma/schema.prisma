generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String
  email             String             @unique
  password          String
  isActive          Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isAdmin           Boolean            @default(false)
  adminAssociations AdminAssociation[]
  socialAccounts    SocialAccount[]

  @@map("users")
}

model SocialAccount {
  id                String             @id @default(cuid())
  platform          String
  accountName       String
  accountId         String             @unique
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            String?
  adminAssociations AdminAssociation[]
  user              User?              @relation(fields: [userId], references: [id])

  @@map("social_accounts")
}

model AdminAssociation {
  id              String        @id @default(cuid())
  userId          String
  socialAccountId String
  assignedAt      DateTime      @default(now())
  assignedBy      String
  isActive        Boolean       @default(true)
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, socialAccountId])
  @@map("admin_associations")
}

model ScheduledPost {
  id                 String     @id @default(cuid())
  userId             String
  socialAccountId    String
  videoUrl           String
  videoFilename      String
  videoSize          Int
  onlySocialMediaId  String?
  onlySocialPostId   String?
  onlySocialMediaUrl String?
  caption            String
  postType           String
  scheduledFor       DateTime
  status             PostStatus @default(PENDING)
  errorMessage       String?
  retryCount         Int        @default(0)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  uploadedToOSAt     DateTime?
  scheduledAt        DateTime?
  publishedAt        DateTime?

  @@index([status])
  @@index([scheduledFor])
  @@index([userId])
  @@index([socialAccountId])
  @@map("scheduled_posts")
}

enum PostStatus {
  PENDING
  VIDEO_UPLOADED_DO
  VIDEO_UPLOADED_OS
  SCHEDULED
  PUBLISHED
  FAILED
  CANCELLED
}
