// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String
  email             String             @unique
  password          String
  isActive          Boolean            @default(false)
  isAdmin           Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  socialAccounts    SocialAccount[]
  adminAssociations AdminAssociation[]

  @@map("users")
}

model SocialAccount {
  id           String @id @default(cuid())
  platform     String // instagram, facebook, twitter, etc.
  accountName  String
  accountId    String @unique // ID from OnlySocial platform
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  userId       String?
  user         User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  adminAssociations AdminAssociation[]

  @@map("social_accounts")
}

model AdminAssociation {
  id              String        @id @default(cuid())
  userId          String
  socialAccountId String
  assignedAt      DateTime      @default(now())
  assignedBy      String        // Admin user ID who made the association
  isActive        Boolean       @default(true)
  
  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)

  @@unique([userId, socialAccountId])
  @@map("admin_associations")
}

// Enum per lo stato del post schedulato
enum PostStatus {
  PENDING           // In attesa di essere processato
  VIDEO_UPLOADED_DO // Video caricato su DigitalOcean
  VIDEO_UPLOADED_OS // Video caricato su OnlySocial
  SCHEDULED         // Post schedulato su OnlySocial
  PUBLISHED         // Post pubblicato
  FAILED            // Errore durante il processo
  CANCELLED         // Cancellato dall'utente
}

// Tabella per i post schedulati
model ScheduledPost {
  id                    String      @id @default(cuid())
  
  // Info utente e account
  userId                String
  socialAccountId       String
  
  // Info video
  videoUrl              String      // URL su DigitalOcean Spaces
  videoFilename         String      // Nome del file originale
  videoSize             Int         // Dimensione in bytes
  
  // Info OnlySocial
  onlySocialMediaId     String?     // ID del media su OnlySocial (quando caricato)
  onlySocialPostId      String?     // ID del post su OnlySocial (quando schedulato)
  onlySocialMediaUrl    String?     // URL del media su OnlySocial storage
  
  // Info post
  caption               String      @db.Text
  postType              String      // reel, story, post
  scheduledFor          DateTime    // Data e ora di pubblicazione
  
  // Stato e metadata
  status                PostStatus  @default(PENDING)
  errorMessage          String?     @db.Text
  retryCount            Int         @default(0)
  
  // Timestamps
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  uploadedToOSAt        DateTime?   // Quando è stato caricato su OnlySocial
  scheduledAt           DateTime?   // Quando è stato schedulato su OnlySocial
  publishedAt           DateTime?   // Quando è stato pubblicato
  
  @@index([status])
  @@index([scheduledFor])
  @@index([userId])
  @@index([socialAccountId])
  @@map("scheduled_posts")
}
