generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String
  email             String             @unique
  password          String
  isActive          Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isAdmin           Boolean            @default(false)
  timezone          String             @default("Europe/Rome") // IANA timezone (es: Europe/Rome, America/New_York)
  adminAssociations AdminAssociation[]
  socialAccounts    SocialAccount[]
  scheduledPosts    ScheduledPost[]

  @@map("users")
}

model SocialAccount {
  id                String             @id @default(cuid())
  platform          String
  accountName       String
  accountId         String             @unique
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            String?
  adminAssociations AdminAssociation[]
  user              User?              @relation(fields: [userId], references: [id])

  @@map("social_accounts")
}

model AdminAssociation {
  id              String        @id @default(cuid())
  userId          String
  socialAccountId String
  assignedAt      DateTime      @default(now())
  assignedBy      String
  isActive        Boolean       @default(true)
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, socialAccountId])
  @@map("admin_associations")
}

model ScheduledPost {
  id                 String     @id @default(cuid())
  userId             String
  socialAccountId    String
  accountUuid        String     @default("")  // UUID account OnlySocial (prima di conversione a integer)
  accountId          Int?       // ID intero OnlySocial (dopo conversione)
  
  // Video (supporto per array multipli)
  videoUrls          String[]   @default([])  // Array di URL video (DigitalOcean/Cloudflare)
  videoFilenames     String[]   @default([])  // Array di nomi file originali
  videoSizes         Int[]      @default([])  // Array di dimensioni file in bytes
  
  // OnlySocial IDs (popolati dopo upload)
  onlySocialMediaIds String[]   @default([])  // Media IDs da OnlySocial (dopo upload)
  onlySocialPostUuid String?    // UUID post OnlySocial (dopo creazione)
  onlySocialMediaUrl String?    // URL media OnlySocial (legacy, deprecato)
  
  // Contenuto
  caption            String
  postType           String     @default("reel")  // 'post', 'reel', 'story'
  
  // Scheduling
  scheduledFor       DateTime   // SEMPRE IN UTC! Conversione fatta al momento dell'input
  timezone           String     @default("Europe/Rome")  // Timezone utente (IANA)
  
  // Stati del processo
  status             PostStatus @default(PENDING)
  preUploaded        Boolean    @default(false)  // Video già caricati su OnlySocial?
  preUploadAt        DateTime?  // Quando sono stati pre-caricati
  publishedAt        DateTime?  // Quando è stato effettivamente pubblicato
  
  // Error handling
  errorMessage       String?
  retryCount         Int        @default(0)
  maxRetries         Int        @default(3)
  
  // Audit
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  
  // Relations
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([scheduledFor])
  @@index([userId])
  @@index([socialAccountId])
  @@index([status, scheduledFor])  // Indice composto per query cron
  @@map("scheduled_posts")
}

enum PostStatus {
  PENDING           // In attesa
  MEDIA_UPLOADED    // Video caricati su OnlySocial, in attesa di pubblicazione
  PUBLISHED         // Pubblicato con successo
  FAILED            // Errore durante pubblicazione
  CANCELLED         // Cancellato dall'utente
}
